/* * * Universal * * */

/* Apply styling to all elements (including their `::before` and `::after`
pseudo-elements). One common use of this selector is to apply a custom
`box-sizing`. */
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  font-family: "Montserrat", sans-serif;
  text-decoration: none;
  font-size: 18px;
  color: var(--secondary-text);
}

/* * * Root * * */

@import url("https://fonts.googleapis.com/css2?family=Bungee&family=Montserrat&display=swap");

:root {
  /* primary colours */
  --primary: #0097a7;
  --primary-dark: #008492;
  --secondary: #9900ff;
  --secondary-dark: #6a00b1;
  --tertiary: #ffc400;
  --grey: #f3f3f3;
  --white: #ffffffff;

  /* text colours */
  --primary-text: #010f1d;
  --secondary-text: #ffffffff;

  /* secondary colours */
  --mid-blue: #5b80a3;
  --primary-text-overlay: #071e34b4;
  --teal: #408a99;

  /* shadows */
  --default-box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),
    0 6px 20px 0 rgba(0, 0, 0, 0.19);
  --default-text-shadow: 4px 4px 10px #0000004d;
}
html {
}
body {
}

.secondary_background {
  background-color: var(--secondary-dark);
}

/* * * Content Sectioning * * */

/* Header and footer */
header {
  display: flex;
  padding: 20px;
  align-items: center;
  justify-content: space-between;
  background-color: var(--primary);
}
footer {
  background-color: var(--mid-blue);
  display: grid;
  justify-items: center;
  padding-top: 20px;
  padding-bottom: 20px;
}

/* Nav */
nav {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: right;
}
.nav_button_options{
  justify-content: center;
}

nav ul,
nav ol {
}
nav li {
}
nav a {
}
nav a:visited {
}
nav a:hover {
}
nav a:active {
}

/* Main and sections */

.page_container {
  height: 100vh;
  display: flex;
  flex-flow: column;
}
main {
  background-image: linear-gradient(var(--primary), var(--primary-dark));
  display: flex;
  flex-flow: column;
  flex: 1;
}

section {
  display: flex;
  flex-flow: column;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  flex: 1;
}
.row_flex {
  flex-flow: row;
}
span {
  width: 100%;
  filter: drop-shadow(-1px 6px 3px rgba(0, 0, 0, 0.2));
  /* height: 130px; */
}

/* Pop-ups and overlays */
.pop_up {
  background-color: var(--mid-blue);
  display: grid;
  align-self: center;
  justify-self: center;
  justify-items: center;
  border-radius: 10px;
  width: 70vw;
  color: var(--secondary-text);
  padding: 30px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  box-shadow: var(--default-box-shadow);
  z-index: 2;
}

.pop_up_overlay {
  display: grid;
  background-color: var(--primary-text-overlay);
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 2;
}
.camera_overlay {
  display: grid;
  align-content: space-between;
  justify-items: center;
  padding-top: 0px;
  padding-bottom: 0px;
  z-index: 1;
  width: 100%;
  height: 100%;
}

.home_background {
  background-image: linear-gradient(var(--secondary-dark),var(--secondary) );
  clip-path: polygon(0 0, 100% 0, 100% 87%, 0 100%);
}

/* * * Custom Containers * * */

.map_container {
  position: relative;
  z-index: 0;
}
.ul_list_container {
  display: flex;
  align-items: center;
  justify-content: center;
  list-style-type: none;
}
.theme_selector_container {
  display: flex;
  align-items: center;
  justify-content: center;
}
.theme_container {
  overflow: hidden;
  display: grid;
  align-content: center;
  text-align: center;
  color: var(--secondary-text);
  background-color: var(--mid-blue);
  width: 300px;
  height: 150px;
  margin: 20px;
  margin-left: 0px;
  margin-right: 0px;
  border-radius: 10px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}


/* * * Text block content * * */

/* Headers */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: "Bungee", cursive;
  text-shadow: var(--default-text-shadow);
}
h1 {
  color: var(--secondary-text);
  margin-bottom: 15px;
  font-size: 2rem;
}
.no_margin {
  margin-bottom: 0px;
}
h2 {
  margin-bottom: 15px;
}

/* Overall styling, e.g. vertical spacing */
p,
ol,
ul,
pre,
blockquote,
figure,
hr,
dl {
  margin-bottom: 20px;
  margin-top: 20px;
}
p {
}
ol,
ul {
  /* width: 100%;  */
  list-style-type: none;
  display: grid;
}
li {
  align-items: center;
  justify-content: center;
  padding: 20px;
  text-align: center;
}
.li_checkbox {
  display: inline-block;
  margin: 5px;
  padding: 0px;
}

/* * * Inline text semantics * * */

a {
  color: var(--tertiary);
}
a:hover {
  color: var(--teal);
}
strong {
}
b {
}
em {
}
i {
}

/* If you specify a font size, consider using the `em` unit so that it works
universally, e.g. for both `h1 small` and `p small` */
small {
}
data {
}
time {
}

/* * * Demarcating edits * * */

del {
}
ins {
}

/* * * Embedded content * * */

img {
}
.icon {
  height: 30px;
}
.asset_img {
  width: 100%;
  object-fit: cover;
  border-radius: 10px;
}

svg {
}

/* * * Forms and buttons * * */

fieldset {
}
fieldset:disabled {
}
legend {
}
form {
  display: grid;
  align-items: center;
  justify-items: center;
}
label {
  color: var(--secondary-text);
}
::placeholder {
}
:focus::placeholder {
}

.find_checkbox_label {
  /* border: 1px solid #fff;
  padding: 10px; */
  display: block;
  position: relative;
  margin: 0px;
  cursor: pointer;
}

.find_checkbox_label:before {
  background-color: white;
  color: white;
  content: " ";
  display: block;
  border-radius: 50%;
  border: 1px solid var(--tertiary);
  position: absolute;
  top: -5px;
  left: -5px;
  width: 25px;
  height: 25px;
  text-align: center;
  line-height: 28px;
  transition-duration: 0.4s;
  transform: scale(0);
  z-index: 1;
}

.find_checkbox_label img {
  height: 60px;
  width: 60px;
  transition-duration: 0.2s;
  transform-origin: 50% 50%;
  box-shadow: var(--default-box-shadow);
}

:checked + .find_checkbox_label {
  border-color: #ddd;

}

:checked + .find_checkbox_label:before {
  content: "âœ“";
  background-color: var(--tertiary);
  transform: scale(1);
}

:checked + .find_checkbox_label .asset_img {
  transform: scale(0.9);
  box-shadow: 0 0 5px #333;
  z-index: -1;
}

/* Overall styling, e.g. vertical spacing */
input {
  padding: 10px;
  padding-left: 20px;
  padding-right: 20px;
  margin-top: 20px;
  margin-bottom: 20px;
  border-radius: 30px;
  border: none;
  text-align: center;
  color: var(--primary-text);
  box-shadow: var(--default-box-shadow);
}
input[type="checkbox"] {
  display: none;
}

button {
  width: 250px;
  padding: 10px;
  padding-left: 20px;
  padding-right: 20px;
  margin-top: 20px;
  margin-bottom: 20px;
  margin-left: 10px;
  margin-right: 10px;
  border-radius: 30px;
  border: none;
  text-align: center;
  color: var(--primary-text);
  background-color: var(--grey);
  box-shadow: var(--default-box-shadow);
}
button:hover {
  background-color: var(--tertiary);
}
button:disabled {
}
button.secondary {
  border: none;
  background-color: transparent;
  color: var(--tertiary);
  box-shadow: none;
  margin: 0px;
  padding: 0px;
}
button.secondary:disabled {
}

/* Additional button classes */
.button_icon {
  width: 40px;
  border: none;
  background-color: transparent;
  box-shadow: none;
  margin: 0px;
  padding: 5px;
}
.button_find {
  padding: 0px;
  overflow: hidden;
  display: grid;
  align-items: center;
  text-align: center;
  color: var(--secondary-text);
  background-color: var(--mid-blue);
  width: 60px;
  height: 60px;
  margin: 5px;
  border-radius: 10px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

/* Arrow buttons */
.button_arrow {
width: 25px;
height: 25px;
margin: 10px;
padding: 0px;
background-color: transparent;
z-index: 2;
border: solid var(--white);
box-shadow: none;
border-width: 0 10px 10px 0;
display: inline-block;
border-radius: 0px;
}
.button_arrow:hover{
  background-color: transparent;
  border: solid var(--tertiary);
  border-width: 0 10px 10px 0;
}
.right {
  transform: rotate(-45deg);
  -webkit-transform: rotate(-45deg);
}
.left {
  transform: rotate(135deg);
  -webkit-transform: rotate(135deg);
}

.button_menu {
  width: 150px;
}

/* player view */
.button_player_view {
  background-color: var(--secondary);
  color: var(--secondary-text);
}
/* this ought to be made into a reusable element or put in specific player view section */
.button_display {
  padding: 10px;
  margin: 20px;
  padding-left: 20px;
  padding-right: 20px;
  border-radius: 30px;
  background-color: var(--secondary);
  color: var(--secondary-text);
}

/* This matches forms or form elements that are invalid *and* have been
interacted with. Note that:
1) You may need to add the `interacted` class to forms yourself
2) You may need to add the `touched` class to form fields yourself
3) `:user-invalid` is a working draft and not yet supported by most browsers
4) `:-moz-ui-invalid` is non-standard and only works in Firefox
Form validation error messages will appear (in capable browsers) regardless of
this styling. You can omit 1) and 2) and still have working forms. Perfect
example of progressive enhancement. */
/* Applies to invalid forms */
form.interacted:invalid {
}
/* Applies to invalid form fields. You would need to repeat your declarations
for the following three groups of selectors individually. Browsers completely
ignore any rule that contains a selector they do not know. */
form.interacted :invalid,
form .touched:invalid {
}
:user-invalid {
}
:-moz-ui-invalid {
}

/* * * Interactive elements * * */

details {
}
details[open] {
}
summary {
}
details[open] summary {
}
dialog {
}
dialog::backdrop {
}

/* Some form fields, `details`, elements with `tabindex`, and possibly other
elements can be focussed. You should use `:focus-visible` instead of `:focus`
whenever possible. As the former is not yet widely supported, you need to do it
as follows:
1) Set styling on focus
2) If browser supports `:focus-visible`, revert/unset the styling from 1)
3) If the element matches `:focus-visible`, apply the styling again */
:focus {
}
:focus:not(:focus-visible) {
}
:focus-visible {
}

/* * * Media queries * * */

@media (prefers-reduced-motion: reduce) {
}
@media (prefers-color-scheme: dark) {
}
@media (orientation: portrait) {
}
@media (orientation: landscape) {
}
@media print {
}

/* This file evolved from Natural Selection: https://github.com/frontaid/natural-selection */
